/*
 * This file is generated by jOOQ.
*/
package de.jottyfan.camporganizer.db.jooq.tables;


import de.jottyfan.camporganizer.db.jooq.Camp;
import de.jottyfan.camporganizer.db.jooq.Keys;
import de.jottyfan.camporganizer.db.jooq.tables.records.TCampRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TCamp extends TableImpl<TCampRecord> {

    private static final long serialVersionUID = -1822573489;

    /**
     * The reference instance of <code>camp.t_camp</code>
     */
    public static final TCamp T_CAMP = new TCamp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TCampRecord> getRecordType() {
        return TCampRecord.class;
    }

    /**
     * The column <code>camp.t_camp.pk</code>.
     */
    public final TableField<TCampRecord, Integer> PK = createField("pk", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('camp.t_camp_pk_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>camp.t_camp.name</code>.
     */
    public final TableField<TCampRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>camp.t_camp.arrive</code>.
     */
    public final TableField<TCampRecord, Timestamp> ARRIVE = createField("arrive", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>camp.t_camp.depart</code>.
     */
    public final TableField<TCampRecord, Timestamp> DEPART = createField("depart", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>camp.t_camp.fk_location</code>.
     */
    public final TableField<TCampRecord, Integer> FK_LOCATION = createField("fk_location", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>camp.t_camp.min_age</code>.
     */
    public final TableField<TCampRecord, Integer> MIN_AGE = createField("min_age", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>camp.t_camp.max_age</code>.
     */
    public final TableField<TCampRecord, Integer> MAX_AGE = createField("max_age", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>camp.t_camp.price</code>.
     */
    public final TableField<TCampRecord, String> PRICE = createField("price", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>camp.t_camp.countries</code>.
     */
    public final TableField<TCampRecord, String> COUNTRIES = createField("countries", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>camp.t_camp</code> table reference
     */
    public TCamp() {
        this("t_camp", null);
    }

    /**
     * Create an aliased <code>camp.t_camp</code> table reference
     */
    public TCamp(String alias) {
        this(alias, T_CAMP);
    }

    private TCamp(String alias, Table<TCampRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCamp(String alias, Table<TCampRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Camp.CAMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TCampRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_CAMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TCampRecord> getPrimaryKey() {
        return Keys.T_CAMP_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TCampRecord>> getKeys() {
        return Arrays.<UniqueKey<TCampRecord>>asList(Keys.T_CAMP_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TCampRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TCampRecord, ?>>asList(Keys.T_CAMP__T_CAMP_FK_LOCATION_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCamp as(String alias) {
        return new TCamp(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCamp rename(String name) {
        return new TCamp(name, null);
    }
}
