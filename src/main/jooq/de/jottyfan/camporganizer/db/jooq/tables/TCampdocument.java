/*
 * This file is generated by jOOQ.
*/
package de.jottyfan.camporganizer.db.jooq.tables;


import de.jottyfan.camporganizer.db.jooq.Camp;
import de.jottyfan.camporganizer.db.jooq.Indexes;
import de.jottyfan.camporganizer.db.jooq.Keys;
import de.jottyfan.camporganizer.db.jooq.tables.records.TCampdocumentRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TCampdocument extends TableImpl<TCampdocumentRecord> {

    private static final long serialVersionUID = -1560625031;

    /**
     * The reference instance of <code>camp.t_campdocument</code>
     */
    public static final TCampdocument T_CAMPDOCUMENT = new TCampdocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TCampdocumentRecord> getRecordType() {
        return TCampdocumentRecord.class;
    }

    /**
     * The column <code>camp.t_campdocument.pk</code>.
     */
    public final TableField<TCampdocumentRecord, Integer> PK = createField("pk", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('camp.t_campdocument_pk_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>camp.t_campdocument.fk_camp</code>.
     */
    public final TableField<TCampdocumentRecord, Integer> FK_CAMP = createField("fk_camp", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>camp.t_campdocument.fk_document</code>.
     */
    public final TableField<TCampdocumentRecord, Integer> FK_DOCUMENT = createField("fk_document", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>camp.t_campdocument</code> table reference
     */
    public TCampdocument() {
        this(DSL.name("t_campdocument"), null);
    }

    /**
     * Create an aliased <code>camp.t_campdocument</code> table reference
     */
    public TCampdocument(String alias) {
        this(DSL.name(alias), T_CAMPDOCUMENT);
    }

    /**
     * Create an aliased <code>camp.t_campdocument</code> table reference
     */
    public TCampdocument(Name alias) {
        this(alias, T_CAMPDOCUMENT);
    }

    private TCampdocument(Name alias, Table<TCampdocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCampdocument(Name alias, Table<TCampdocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Camp.CAMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_CAMPDOCUMENT_PKEY, Indexes.UK_CAMPDOCUMENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TCampdocumentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_CAMPDOCUMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCampdocument as(String alias) {
        return new TCampdocument(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCampdocument as(Name alias) {
        return new TCampdocument(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCampdocument rename(String name) {
        return new TCampdocument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCampdocument rename(Name name) {
        return new TCampdocument(name, null);
    }
}
